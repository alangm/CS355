package cs355.model.image;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.util.Arrays;

public class Image extends CS355Image {
	
	public BufferedImage bi = null;
	private int[][] pixels = null;
	private int height, width;

	public Image(){
		super();
		height = super.getHeight();
		width = super.getWidth();
	}

	@Override
	public BufferedImage getImage() {
		if(bi != null) {
			return bi;
		}
		
		int w = super.getWidth();
		int h = super.getHeight();
		bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
		WritableRaster wr = bi.getRaster();
        
		int[] rgb = new int[3];
		
		for (int y = 0; y < h; ++y) {
			for (int x = 0; x < w; ++x) {
				wr.setPixel(x, y, super.getPixel(x, y, rgb));
			}
		}
		
		bi.setData(wr);
		
        return bi;
	}

	@Override
	public void edgeDetection() {
        int[][] newPixels = new int[height][width];
		
		int[] rgb = new int[3];
		float[] hsb = new float[3];
		
		int[] xPos = new int[9];
		int[] yPos = new int[9];
		
		int[] sX = {-1, 0, 1, -2, 0, 2, -1, 0, 1};
		int[] sY = {-1, -2, -1, 0, 0, 0, 1, 2, 1};
		
		int height = super.getHeight();
		int width = super.getWidth();
		
		for (int y = 0; y < height; ++y) 
		{
			for (int x = 0; x < width; ++x) 
			{
				int px = x > 0 ? x-1 : 0; //previous x, or 0
				int py = y > 0 ? y-1 : 0; //previous y, or 0
				int nx = x < width-1 ? x+1 : x; //next x, or x if edge
				int ny = y < height-1 ? y+1 : y; //next y, or y if edge
				
				xPos[0] = px; 	yPos[0] = py;
				xPos[1] = x; 	yPos[1] = py;
				xPos[2] = nx; 	yPos[2] = py;
				xPos[3] = px; 	yPos[3] = y;
				xPos[4] = x; 	yPos[4] = y;
				xPos[5] = nx; 	yPos[5] = y;
				xPos[6] = px; 	yPos[6] = ny;
				xPos[7] = x; 	yPos[7] = ny;
				xPos[8] = nx; 	yPos[8] = ny;
				
				double xTotal = 0;
				double yTotal = 0;
				
				for(int i=0;i<9;i++)
				{
					rgb = super.getPixel(xPos[i], yPos[i], rgb);
					hsb = Color.RGBtoHSB(rgb[0], rgb[1], rgb[2], hsb);
					
					xTotal += (sX[i]*hsb[2]);
					yTotal += (sY[i]*hsb[2]);
				}
				
				xTotal /= 8;
				yTotal /= 8;
				
				double magnitude = Math.sqrt(xTotal*xTotal + yTotal*yTotal);
				int colorValue = Math.min((int) ( magnitude * 255) + 128, 255);
				
				newPixels[width * y + x][0] = colorValue;
				newPixels[width * y + x][1] = colorValue;
				newPixels[width * y + x][2] = colorValue;
			}
		}
		
		pixels = newPixels;
		bi=null;
	}

	@Override
	public void sharpen() {
        int[][] newPixels = new int[height][width];

        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                int pr = Math.max(r-1, 0);
                int pc = Math.max(c-1, 0);
                int nr = Math.min(r+1, height-1);
                int nc = Math.min(c+1, width-1);

                int sum = -pixels[pr][c ] +
                        -pixels[r ][pc] +
                        6*pixels[r ][c ] +
                        -pixels[r ][nc] +
                        -pixels[nr][c ];

                newPixels[r][c] = sum/2;

                if (newPixels[r][c] > 255) {
                    newPixels[r][c] = 255;
                } else if (newPixels[r][c] < 0) {
                    newPixels[r][c] = 0;
                }
            }
        }

        pixels = newPixels;
		bi = null;
	}

	@Override
	public void medianBlur() {
        int[][] newPixels = new int[height][width];

        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                int pr = Math.max(r-1, 0);
                int pc = Math.max(c-1, 0);
                int nr = Math.min(r+1, height-1);
                int nc = Math.min(c+1, width-1);

                int[] vals = new int[]{
                    pixels[pr][pc],
                    pixels[pr][c ],
                    pixels[pr][nc],
                    pixels[r ][pc],
                    pixels[r ][c ],
                    pixels[r ][nc],
                    pixels[nr][pc],
                    pixels[nr][c ],
                    pixels[nr][nc]
                };
                Arrays.sort(vals);

                newPixels[r][c] = vals[4];
            }
        }

        pixels = newPixels;
		bi = null;
	}

	@Override
	public void uniformBlur() {
        int[][] newPixels = new int[height][width];

        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                int pr = Math.max(r-1, 0);
                int pc = Math.max(c-1, 0);
                int nr = Math.min(r+1, height-1);
                int nc = Math.min(c+1, width-1);

                int sum = pixels[pr][pc] +
                          pixels[pr][c ] +
                          pixels[pr][nc] +
                          pixels[r ][pc] +
                          pixels[r ][c ] +
                          pixels[r ][nc] +
                          pixels[nr][pc] +
                          pixels[nr][c ] +
                          pixels[nr][nc];

                newPixels[r][c] = sum/9;
            }
        }

        pixels = newPixels;
		bi = null;
	}

	@Override
	public void grayscale() {
		// TODO Auto-generated method stub

	}

	@Override
	public void contrast(int amount) {
        double scalar = Math.pow((double) (amount+100) / 100.00, 4);
        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                double p = (double) pixels[r][c];
                pixels[r][c] = (int) (scalar*(p-128)+128);
                if (pixels[r][c] > 255) {
                    pixels[r][c] = 255;
                } else if (pixels[r][c] < 0) {
                    pixels[r][c] = 0;
                }
            }
        }
	}

	@Override
	public void brightness(int amount) {
        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                pixels[r][c] += amount;
                if (pixels[r][c] > 255) {
                    pixels[r][c] = 255;
                }
            }
        }
	}

}
